#*
 *
 * The MIT License
 *
 * Copyright 2006-2011 The Codehaus.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *#
  ------
  Using the Application Assembler Plugin
  ------
  ------
  ------

Simple example

* Configuring

  The following is a basic configuration of the plugin, and an example of usage based on a project
  generated with:

+--------------------------
mvn archetype:create -DgroupId=com.mycompany.app -DartifactId=my-app
+--------------------------

  Configuring the plugin in <<<pom.xml>>>:

+--------------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <version>${project.version}</version>
        <configuration>
          <programs>
            <program>
              <mainClass>com.mycompany.app.App</mainClass>
              <name>app</name>
            </program>
          </programs>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
+--------------------------

* Using the generated scripts

+--------------------------
$ mvn package appassembler:assemble
...
$ sh target/appassembler/bin/app
Hello World!
+--------------------------

      * All dependencies and the artifact itself are placed in the defined assemble directory
        (defaults to <<<\${project.build.directory}/appassembler>>>).

      * A <<<bin/>>> directory is created in the assemble directory and the generated bin scripts are
        placed in that directory (defaults to both unix shell scripts and Windows bat files).

      []

~~ TODO: Add an example of what a generated shell script and bat file looks like


* Advanced example

  The following is a configuration example with more of the available options set.

** Configuring

+--------------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <version>${project.version}</version>
        <configuration>
          <!-- Set the target configuration directory to be used in the bin scripts -->
          <configurationDirectory>conf</configurationDirectory>
          <!-- Copy the contents from "/src/main/config" to the target
               configuration directory in the assembled application -->
          <copyConfigurationDirectory>true</copyConfigurationDirectory>
          <!-- Include the target configuration directory in the beginning of
               the classpath declaration in the bin scripts -->
          <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
          <!-- set alternative assemble directory -->
          <assembleDirectory>\${project.build.directory}/mycompany-assemble</assembleDirectory>
          <!-- Extra JVM arguments that will be included in the bin scripts -->
          <extraJvmArguments>-Xms128m</extraJvmArguments>
          <!-- Generate bin scripts for windows and unix pr default -->
          <platforms>
            <platform>windows</platform>
            <platform>unix</platform>
          </platforms>
          <programs>
            <program>
              <mainClass>com.mycompany.app.WindowsApp1</mainClass>
              <name>app1</name>
              <!-- Only generate windows bat script for this application -->
              <platforms>
                <platform>windows</platform>
              </platforms>
            </program>
            <program>
              <mainClass>com.mycompany.app.UnixApp2</mainClass>
              <name>app2</name>
              <!-- Only generate unix shell script for this application -->
              <platforms>
                <platform>unix</platform>
              </platforms>
            </program>
            <program>
              <mainClass>com.mycompany.app.App3</mainClass>
              <commandLineArguments>
              	<!-- Add two predefined command line arguments to the call of App3 -->
              	<commandLineArgument>arg1</commandLineArgument>
              	<commandLineArgument>arg2</commandLineArgument>
              </commandLineArguments>
              <name>app3</name>
            </program>
            <program>
              <mainClass>com.mycompany.app.App4</mainClass>
              <name>app4</name>
            </program>
          </programs>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
+--------------------------

** Using the generated scripts

+--------------------------
$ mvn package appassembler:assemble
...
$ sh target/mycompany-assemble/bin/mycompanyapp2
Hello World!
+--------------------------
